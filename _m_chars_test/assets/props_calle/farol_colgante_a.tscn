[gd_scene load_steps=5 format=3 uid="uid://blhbfdmwv86tg"]

[ext_resource type="Texture2D" uid="uid://c38k4uqky1t6" path="res://_m_chars_test/assets/luces/luz_farol_colgante.png" id="1_j0kao"]
[ext_resource type="Texture2D" uid="uid://26gxkuvuomjo" path="res://_m_chars_test/assets/atlases/farol_colgante_negro.tres" id="2_j0kao"]

[sub_resource type="GDScript" id="GDScript_tgyy2"]
script/source = "extends Node2D

@export var max_swing_degrees: float = 20.0 # Max angle (from center) 'farol' will swing
@export var min_swing_degrees: float = 5.0  # Min angle (from center) 'farol' will swing
@export var min_swing_speed: float = 0.5    # Min speed (cycles per second) for 'farol'
@export var max_swing_speed: float = 1.5    # Max speed (cycles per second) for 'farol'

var current_amplitude: float	# The actual angle limit for this specific 'farol' (in radians)
var current_frequency: float	# How fast this 'farol' swings (cycles per second)
var current_phase_offset: float # Ensures this 'farol' starts at a different point in its swing

func _ready():
	# Crucially, we seed the random number generator using the unique ID
	# of the scene instance that this 'farol' node belongs to.
	# This means every time you instantiate 'luz_oscil.tscn' in your level,
	# its inner 'farol' node will get a unique random seed, making it oscillate
	# independently from other 'farol' nodes in other 'luz_oscil' instances.
	seed(hash(str(get_instance_id())))
	
	# Randomize the amplitude (how far 'farol' swings) within the defined range
	current_amplitude = deg_to_rad(randf_range(min_swing_degrees, max_swing_degrees))
	
	# Randomize the frequency (how fast 'farol' swings) within the defined range
	current_frequency = randf_range(min_swing_speed, max_swing_speed)
	
	# Randomize the phase offset (where 'farol' starts in its swing cycle)
	# TAU (2 * PI) represents a full circle in radians, ensuring a random starting point.
	current_phase_offset = randf() * TAU 

func _process(_delta):
	# Get the current time in seconds (Time.get_ticks_msec() is in milliseconds)
	var time_in_seconds = Time.get_ticks_msec() / 1000.0
	
	# Calculate the current rotation angle using a sine wave.
	# The sine function creates the smooth back-and-forth motion.
	# The 'time_in_seconds * current_frequency * TAU' part makes it oscillate over time.
	# 'current_phase_offset' shifts its starting point.
	# 'current_amplitude' scales the -1 to 1 sine output to our desired swing range.
	var angle = sin(time_in_seconds * current_frequency * TAU + current_phase_offset) * current_amplitude
	
	# Apply the calculated angle directly to this node's (farol's) rotation.
	# For a 2D node, 'rotation' is a single float representing rotation in radians.
	rotation = angle
	
	# If 'farol' were a 3D node and you wanted to rotate around the Y axis, you'd use:
	# rotation = Vector3(0, angle, 0)
	# Or to set degrees directly:
	# rotation_degrees = Vector3(0, rad_to_deg(angle), 0)
"

[sub_resource type="GDScript" id="GDScript_j0kao"]
script/source = "extends PointLight2D

@export var base_light_energy: float = 1.0 # The normal energy of the light when it's on
@export var min_time_between_glitches: float = 0.5 # Minimum time between glitches (seconds)
@export var max_time_between_glitches: float = 3.0 # Maximum time between glitches (seconds)
@export var min_glitch_off_duration: float = 0.05 # Minimum time the light stays off during a glitch (seconds)
@export var max_glitch_off_duration: float = 0.3  # Maximum time the light stays off during a glitch (seconds)
@export var glitch_chance: float = 0.8 # Probability (0.0 to 1.0) that a scheduled event is a glitch (vs. just a long \"on\" period)

var current_countdown: float = 0.0 # Time until the next potential glitch/state change
var is_off_glitching: bool = false # True if the light is currently off due to a glitch

func _ready():
	# VERY IMPORTANT: Seed the random number generator uniquely for EACH INSTANCE
	# This ensures that when this PointLight2D (and its scene) is instantiated multiple times,
	# each light glitches independently.
	seed(hash(str(get_instance_id())))
	
	# Set the light to its base energy initially
	energy = base_light_energy
	
	# Start the initial countdown to the first event
	_set_next_countdown_time(randf_range(min_time_between_glitches, max_time_between_glitches))

func _process(delta):
	# Decrease the countdown by delta time
	current_countdown -= delta
	
	# If countdown reaches zero or less, it's time for an event
	if current_countdown <= 0:
		_handle_light_event()

func _set_next_countdown_time(time_to_wait: float):
	# Sets the new countdown for the next event
	current_countdown = time_to_wait

func _handle_light_event():
	if is_off_glitching:
		# If it was off, turn it back on to base energy
		energy = base_light_energy
		is_off_glitching = false
		# Schedule the next \"on\" period before a potential new glitch
		_set_next_countdown_time(randf_range(min_time_between_glitches, max_time_between_glitches))
	else:
		# If it was on, decide whether to glitch or stay on
		if randf() < glitch_chance:
			# It's a glitch! Turn the light off
			energy = 0.0
			is_off_glitching = true
			# Schedule how long it stays off
			_set_next_countdown_time(randf_range(min_glitch_off_duration, max_glitch_off_duration))
			
			# Optional: Play a glitch sound or particle effect here
			# if $SomeSoundPlayer: $SomeSoundPlayer.play()
		else:
			# Not a glitch this time, just stay on and schedule the next check
			energy = base_light_energy # Ensure it's on, even if it was already on
			_set_next_countdown_time(randf_range(min_time_between_glitches, max_time_between_glitches))
"

[node name="FarolColganteA" type="Node2D"]

[node name="ColorRect" type="ColorRect" parent="."]
visible = false
offset_left = -331.0
offset_right = 376.0
offset_bottom = 435.0
color = Color(0.223103, 0.223103, 0.223103, 1)

[node name="farol_colgante_negro" type="Sprite2D" parent="."]
texture = ExtResource("2_j0kao")
offset = Vector2(-1.165, 16.365)
script = SubResource("GDScript_tgyy2")
max_swing_degrees = 3.3
min_swing_degrees = 1.5
min_swing_speed = 0.15
max_swing_speed = 0.3

[node name="PointLight2D_farol_titila" type="PointLight2D" parent="farol_colgante_negro"]
position = Vector2(-2, 24)
color = Color(0.349676, 0.719279, 0.754359, 1)
energy = 6.0
shadow_enabled = true
texture = ExtResource("1_j0kao")
offset = Vector2(0, 304.52)
texture_scale = 2.5
script = SubResource("GDScript_j0kao")
base_light_energy = 4.0
min_time_between_glitches = 0.1
min_glitch_off_duration = 0.01
max_glitch_off_duration = 0.05
glitch_chance = 0.25
